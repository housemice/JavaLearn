//      №1 Базовые концепции
//      byte - предназначен для хранения целых чисел.
//      Диапазон чисел от -128 до 127, если число будет большим 127 или меньшим -128 , то выдастся ошибка;
//
//      Целые числа:
//      short - предназначен для хранения целых чисел. Диапазон чисел от -32768 до 32767;
//      int - предназначен для хранения целых чисел. Диапазон чисел от -2147483648 до 2147483647;
//      long - предназначен для хранения целых чисел. Диапазон чисел от –9 223 372 036 854 775 808 до 9 223 372 036 854 775 807.

//      Числа с точкой:
//      float - для создания чисел с плавающей точкой. Диапазон чисел от от -3.4*1038 до 3.4*1038;
//      double - для создания чисел с плавающей точкой. Диапазон чисел от от ±4.9*10-324 до ±1.8*10308.

//      Прочие типы данные
//      bool - логический тип данных. Предназначен для записи истинного (true) или ложного (false) значения;
//      char - тип данных для работы с символами. Позволяет поместить в одинарных кавычках какой-либо символ;
//      String - тип данных для текста. В двойных кавычках можно сохранить одно или множество слов.

//      int a = 0; // Добавление значения сразу
//      byte c; // Создание переменной без значения
//      short b, y = 342; // Создание нескольких переменных

//      №2 Чтение из консоли
//      import java.util.Scanner; -использование функции чтения данных из консоли доступно только после импорта функции
//      Экземпляр – это объект класса, который наследует все методы и переменные класса.
//      Про классы и объекты мы еще детально будем говорить в теме ООП.
//      Scanner some_name = new Scanner(System.in); -> Создаем объект с именем some_name
//      Чтобы получить данные от пользователя мы используем метод класса:
//      int val = some_name.nextInt();

//      nextLine () - для ввода строки. Возвращаемый тип данных String;
//      nextInt () - для ввода целых чисел. Возвращаемый тип данных int;
//      nextFloat () - для ввода чисел с плавающей точкой. Возвращаемый тип данных float;
//      nextDouble () - для ввода больших чисел с плавающей точкой. Возвращаемый тип double.

//      №2.5 Математические операции

//      В Java можно выполнять все математические операции. Это такие операции, как:
//      вычитание - z = y - x;
//      сложение - z = y + x;
//      умножение - z = y * x;
//      деление - z = y / x (на ноль делить нельзя->( Прописывем if(знаменатель != 0) обязательно!!));
//      остаток при делении - z = y % x;

//      z = z + 20;
//      z += 20; Эта запись аналогична той, что находиться выше

//      №3 Условные операторы
//      int a = 2, b = 10;
//      if (a == b) { // Если a будет равным b, тогда будет выполнен код}
//	    Здесь код который будет выполнен
//	    Если все одна строка кода, то фигурные скобки {} можно не ставить
//      else if (a <= b) { // Если а будет меньшим или равным b
//	    Если предыдущее условие не будет выполнено,а здесь условие окажется верным,то будет выполнен этот код
//      else {Этот код сработает, если другие условия не будет выполнено}
//      Множественные условия
//      if (a != b && a > b) {Код будет выполнен, если и первое, и второе условие окажутся верными}
//      if (a < b || a == b) {Код будет выполнен, если или первое, или второе условие окажется верным}

//      int x = 23;
//      switch (x) { // Проверяем переменную x
//  	case 1: // Если переменная будет равна 1, то здесь сработает код
//      Может быть множество строк, а не только одна
//		System.out.print ("Переменная равна 1");
//		break; // Указываем конец для кода для этой проверки
//	    case 56: // Если переменная будет равна 56, то здесь сработает код
//		// Может быть множество строк, а не только одна
//		System.out.print ("Переменная равна 56");
//		break; // Указываем конец для кода для этой проверки
//
//	    По аналогии таких проверок может быть множество
//	    Также можно добавить проверку, которая сработает в случае если все остальные проверки не сработают
//	    default: System.out.print ("Что-то другое");
//	    break; // Можно и не ставить, так как это последние условие

//       Тернарная операция
//       Это сокращенная форма if else. Записывается следующим образом:
//       int x = 3, a = 12;
//       int res = x < a ? (x + a) : (x - a);
//       System.out.println(res);
//       Мы проверяем, если "x" будет меньше за "a", то мы в переменную res устанавливаем их сумму, иначе - их разницу.

//       Цикл While
//       Суть цикла while не особо отличается от цикла for. Единственное отличие заключается в способе записи цикла. В while необходимо прописать лишь условие, а все остальные параметры записываются вне цикла:
//       int i = 1; Создание переменной
//       while (i <= 10) {  Здесь только условие
//	    System.out.println(i);
//	    i++; // Увеличение переменной
//      }

//      Цикл Do While
//      Цикл схож с циклом while по форме написания, но при этом работает немного по-другому.
//      Цикл do..while будет выполнен один раз сто процентов, а дальше проверит условие и если оно верно, то цикл будет выполняться дальше:
//      int x = 13;
//      do {
//	    x--;
//      System.out.println(x);}
//      while (x > 10);
//      Как видно из примера, цикл изначально неверный, но это не мешает ему сработать один раз.

//      Операторы для работы в циклах
//      Существует три основных оператора для работы в циклах:
//      Оператор break - служит для выхода из цикла полностью;
//      Оператор return - выполняет ту же функцию, что и оператор break, но  для циклов лучше использовать break;
//      Оператор continue - пропускает лишь одну итерацию и не выходит из цикла.